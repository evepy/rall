import { WagmiAdapter } from "@reown/appkit-adapter-wagmi";
import { base } from "viem/chains";
// createConfig from wagmi is not used here if WagmiAdapter creates the config
// import { createConfig, http } from "wagmi"; 
// For ssr and storage, if needed by WagmiAdapter
// import { cookieStorage, createStorage } from 'wagmi';

const chains = [base]; // Removed 'as const' to make it mutable Chain[]
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;

if (!projectId) {
  console.error("ERROR: NEXT_PUBLIC_PROJECT_ID is not set. Reown AppKit requires this environment variable. Functionality will be affected.");
  // Provide a fallback for type-safety, though Reown might not work.
  // This won't be used if the build/runtime fails due to missing env var elsewhere.
}

// 1. Create and export WagmiAdapter for Reown
// WagmiAdapter will create the wagmiConfig internally.
export const wagmiAdapter = new WagmiAdapter({
  projectId: projectId!, // projectId is required by WagmiAdapter
  networks: chains,      // chains are passed as networks (now Chain[])
  // storage: createStorage({ storage: cookieStorage }), // Optional: for SSR state persistence
  // ssr: true, // Optional: if using SSR features with Wagmi
  // Custom setting from previous logic
  // showBalance: true,  // Custom setting from previous logic
});

// 2. Export the wagmi config generated by the adapter
export const config = wagmiAdapter.wagmiConfig;

// Note: createAppKit is NOT called here. It will be called in providers.tsx (client component). 